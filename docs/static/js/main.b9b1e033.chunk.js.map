{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpextApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","endPoint","encodeURI","fetch","resp","json","data","map","img","id","title","url","images","downsized_medium","console","error","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGif","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXY,SAACC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAQ,OAAKP,GAAL,mBAAoBO,OAC3CN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SAnBU,SAACP,GACnBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOL,GAAP,qBAAAM,EAAA,6DACbC,EADa,iDACyCC,UAAWR,GADpD,wEAIIS,MAAOF,GAJX,cAITG,EAJS,gBAKQA,EAAKC,OALb,uBAKPC,EALO,EAKPA,KALO,kBAORA,EAAKC,KAAK,SAAAC,GAAQ,IAAD,EACpB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,SAX3B,kCAefG,QAAQC,MAAR,MAfe,0DAAH,sDCAPC,EAAc,SAAC,GAAqB,EAApBP,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAGpC,OACI,sBAAKM,UAAU,yCAAf,UACI,qBAAKC,IAAMP,EAAMQ,IAAKT,IACtB,4BAAIA,QCJHU,EAAU,SAAC,GAAgB,IAAf1B,EAAc,EAAdA,SAErB,ECFuB,SAAEA,GACzB,MAA0BR,mBAAS,CAC/BoB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAYA,OAPAC,qBAAU,WACNzB,EAASL,GACJ+B,MAAM,SAAAb,GAAM,OACTW,EAAS,CAACjB,KAAMM,EAAQS,SAAS,SAE1C,CAAE3B,IAEE4B,EDX2BI,CAAahC,GAAjCkB,EAAd,EAAQN,KAAce,EAAtB,EAAsBA,QAEtB,OAEI,qCACI,oBAAIJ,UAAU,oCAAd,SAAqDvB,IACnD2B,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,qBAAKA,UAAU,YAAf,SAEQL,EAAOL,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEYtBkB,EAzBM,WAGjB,MAAoCzC,mBAAS,CAAC,aAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ2C,EAAWrB,KAAI,SAAAb,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCbjCmC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b9b1e033.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n    \n    const [inputValue, setInputValue] = useState('');\n    \n    const handlerChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handlerSubmit = (e) => {\n        e.preventDefault();\n        \n        if (inputValue.trim().length > 2 ) {\n            setCategories( category => [inputValue, ...category] );\n            setInputValue('');\n        }\n\n    }\n    \n    return (\n        <form onSubmit={handlerSubmit}>\n            <input \n                type=\"text\" \n                value = {inputValue}\n                onChange={ handlerChange } \n                \n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\nexport const getGifs = async( category ) => {\n    const endPoint = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=OBsSPiJ8ebLAlGLLYzyxmUH69M3y33Yc`;\n    try {\n        \n        const resp = await fetch( endPoint );\n        const { data } = await resp.json();\n\n        return data.map( img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }\n        })\n    } catch (error) {\n        console.error(error);\n    }\n  \n\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    \n    \n    return (\n        <div className=\"card animate__animated animate__zoomIn\">\n            <img src={ url } alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGif } from '../hooks/useFetchGif'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    const { data: images, loading } = useFetchGif( category );\n    \n    return (\n        \n        <>\n            <h3 className=\"animate__animated animate__fadeIn\" >{ category }</h3>\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n            <div className=\"card-grid\">\n                {\n                    images.map(img => (\n                        <GifGridItem \n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGif = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGifs( category )\n            .then( images => \n                setState({data: images, loading: false}) \n            );\n    }, [ category ])\n\n    return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n\n    const [categories, setCategories] = useState(['Animanls'])\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid \n                            key={category}\n                            category={category} \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpextApp';\nimport './index.css'; \n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}